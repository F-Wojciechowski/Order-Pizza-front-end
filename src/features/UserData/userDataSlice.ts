import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState, AppThunk} from '../../app/store';


export interface UserState {
    isLogIn: boolean
    status: 'idle' | 'loading' | 'failed';
    id: string | null
    name: string | null
}

const initialState: UserState = {
    isLogIn: false,
    status: 'idle',
    id: null,
    name: null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const ChechLoginAsync = createAsyncThunk(
    'userData/checkLogIn',
    async () => {
        const responseFromApi = await fetch("http://localhost:3001/check", {
            method: "GET",
            credentials: "include",
            headers: {
                'Content-Type': 'application/json'
            },
        });
        const response = await responseFromApi.json()
        return response;
    }
);

export const userDataSlice = createSlice({
    name: 'userData',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        logIn: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.isLogIn = action.payload.isLogIn;
            state.id = action.payload.id;
            state.name = action.payload.name
        },
        logOut: (state) => {
            state.isLogIn = false;
        }

        // Use the PayloadAction type to declare the contents of `action.payload`

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(ChechLoginAsync.fulfilled, (state, action) => {
                state.isLogIn = action.payload.isLogIn;
                state.name = action.payload.name
            });

    },
});

export const {logIn, logOut} = userDataSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserData = (state: RootState) => state.userData

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//         (dispatch, getState) => {
//             const currentValue = selectCount(getState());
//             if (currentValue % 2 === 1) {
//                 dispatch(incrementByAmount(amount));
//             }
//         };


